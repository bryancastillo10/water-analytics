// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  PUBLIC
  ANALYST
}

enum WaterSourceType {
  DOMESTIC
  INDUSTRIAL
  AGRICULTURAL
  GROUNDWATER
  SURFACE
  OTHERS
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  username        String    @unique
  email           String    @unique
  password        String
  profilePic   String?
  role            UserRole
  resetCode       String?
  resetCodeExpiry DateTime?
  
  // User Relationships
  sites           Site[]
  notes           Note[]
  thresholds      Threshold[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Site {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  siteName        String
  location    String
  description String
  imageUrl String?   
  sourceType  WaterSourceType 
  
  // Site Relationships
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  measurements Measurement[]

  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Measurement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date DateTime @default(now()) @unique
  
  // Core Parameters
  pH           Float?
  suspendedSolids   Int?  // mg/L
  totalCOD          Int?  // mg/L
  fecalColiform     Int?  // MPN/100mL
  
  // Additional Parameters 
  temperature       Float?  // Â°C
  dissolvedOxygen   Float?  // mg/L
  
  // Nutrients
  ammonia          Float?  // mg/L
  nitrates         Float?  // mg/L
  phosphates       Float?  // mg/L
  
  // Relationships
  siteId    String   @db.ObjectId
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

}

model Threshold {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Parameter thresholds
  parameter String   
  minValue  Float?
  maxValue  Float?
  unit      String
  
  // Relationships
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete:Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  isCompleted Boolean

  // Note Relationships
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete:Cascade)
  
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}